"""
Flexi b√©rlet aj√°nl√≥ app (Streamlit)
-----------------------------------
Seg√≠t az asszisztenseknek gyorsan kisz√°molni,
hogy melyik flexi b√©rlet a legjobb aj√°nlat adott √°rhoz √©s alkalomsz√°mhoz.
"""

import itertools
import pandas as pd
import streamlit as st

# ========== Flexi b√©rletek ==========
BERLETEK = [
    {"nev": "Flexi50",  "ar": 45000,  "ertek": 50000},
    {"nev": "Flexi100", "ar": 85000,  "ertek": 100000},
    {"nev": "Flexi200", "ar": 160000, "ertek": 200000},
    {"nev": "Flexi300", "ar": 225000, "ertek": 300000},
    {"nev": "Flexi400", "ar": 290000, "ertek": 400000},
    {"nev": "Flexi500", "ar": 350000, "ertek": 500000},
]

# ========== Sz√°m√≠t√°si logika ==========
def legjobb_flexi_ajanlat(lista_ar_alkalom: float, alkalmak: int):
    teljes_listaar = lista_ar_alkalom * alkalmak
    eredmenyek = []

    for r in range(1, 4):  # 1‚Äì3 b√©rlet kombin√°ci√≥
        for kombinacio in itertools.combinations_with_replacement(BERLETEK, r):
            ossz_ar = sum(b["ar"] for b in kombinacio)
            ossz_ertek = sum(b["ertek"] for b in kombinacio)
            if ossz_ertek >= teljes_listaar:
                megtakaritas = teljes_listaar - ossz_ar
                megtakaritas_szazalek = 1 - (ossz_ar / teljes_listaar)
                maradek = ossz_ertek - teljes_listaar

                # rendez√©s a kombin√°ci√≥n bel√ºl b√©rlet √©rt√©ke szerint, cs√∂kken≈ë sorrendben
                rendezett = sorted(kombinacio, key=lambda b: b["ertek"], reverse=True)

                eredmenyek.append({
                    "Kombin√°ci√≥": " + ".join(b["nev"] for b in rendezett),
                    "Flexi √°ra": ossz_ar,
                    "Flexi √©rt√©ke": ossz_ertek,
                    "Lista√°ron fizetne": teljes_listaar,
                    "Megtakar√≠t√°s (Ft)": megtakaritas,
                    "Megtakar√≠t√°s (%)": round(megtakaritas_szazalek * 100, 2),
                    "Marad√©k √©rt√©k (Ft)": maradek
                })

    if not eredmenyek:
        return None, None

    df = pd.DataFrame(eredmenyek)
    legjobb = df.sort_values("Flexi √°ra").iloc[0]
    return legjobb, df.sort_values("Flexi √°ra")

# ========== Streamlit UI ==========

st.set_page_config(page_title="Flexi b√©rlet aj√°nl√≥", layout="centered")

st.title("Flexi b√©rlet kalkul√°tor")
st.markdown("""
Seg√≠t meghat√°rozni, hogy **melyik Flexi b√©rlet vagy b√©rletkombin√°ci√≥**
a legjobb aj√°nlat egy adott kezel√©shez.  
Add meg a kezel√©s **lista√°r√°t** √©s az **alkalmak sz√°m√°t**:
""")

# Bemenetek
lista_ar_alkalom = st.number_input("Lista√°r egy alkalomra (Ft):", min_value=10000, step=10000, value=None)
alkalmak = st.number_input("Alkalmak sz√°ma:", min_value=1, max_value=10, step=1, value=None)

# Kijelz√©si m√≥d v√°laszt√≥
display_mode = st.radio("Megjelen√≠t√©si m√≥d:", ["üìä Metrikus n√©zet", "üéÅ Marketinges n√©zet"])

# Gomb
if st.button("Sz√°mol√°s"):
    legjobb, minden = legjobb_flexi_ajanlat(lista_ar_alkalom, alkalmak)
    if legjobb is None:
        st.error("Nincs olyan b√©rlet, ami fedezn√© az √©rt√©ket.")
    else:
        if display_mode == "üìä Metrikus n√©zet":
            # ----- METRIKUS N√âZET -----
            st.metric("Lista√°ron fizetne", f"{int(legjobb['Lista√°ron fizetne']):,} Ft".replace(",", " "))
            st.metric("üí° Flexi aj√°nlat", legjobb["Kombin√°ci√≥"])

            flexi_ar = int(legjobb['Flexi √°ra'])
            megtakaritas = int(legjobb['Megtakar√≠t√°s (Ft)'])
            st.metric(
                label="üí∞ Aj√°nlat √°ra",
                value=f"{flexi_ar:,} Ft".replace(",", " "),
                delta=f"{megtakaritas:,} Ft megtakar√≠t√°s".replace(",", " "),
                delta_color="inverse"  # kisebb √°r = z√∂ld
            )

            flexi_ertek = int(legjobb["Flexi √©rt√©ke"])
            maradek = int(legjobb["Marad√©k √©rt√©k (Ft)"])
            st.metric(
                label="üíº Aj√°nlat teljes √©rt√©ke",
                value=f"{flexi_ertek:,} Ft".replace(",", " "),
                delta=f"+{maradek:,} Ft lev√°s√°rolhat√≥ √©rt√©k marad a b√©rlet√©n".replace(",", " "),
                delta_color="normal"  # plusz = z√∂ld
            )

        else:
            # ----- MARKETINGES N√âZET -----
            kombi = legjobb["Kombin√°ci√≥"]
            flexi_ar_int = int(legjobb["Flexi √°ra"])
            lista_ar_int = int(legjobb["Lista√°ron fizetne"])
            maradek = int(legjobb["Marad√©k √©rt√©k (Ft)"])

            flexi_ar = f"{flexi_ar_int:,} Ft".replace(",", " ")
            lista_ar = f"{lista_ar_int:,} Ft".replace(",", " ")

            # √Årmegjelen√≠t√©s logik√°ja
            if flexi_ar_int < lista_ar_int:
                # kedvezm√©ny
                ar_sor = f"~~{lista_ar}~~ ‚Üí **{flexi_ar}**"
                if maradek > 0:
                    ajandek_sor = f"+ {maradek:,} Ft lev√°s√°rolhat√≥ √©rt√©k".replace(",", " ")
                else:
                    ajandek_sor = ""

            elif flexi_ar_int == lista_ar_int:
                # nincs kedvezm√©ny
                ar_sor = f"**{flexi_ar}**"
                ajandek_sor = f"+ {maradek:,} Ft lev√°s√°rolhat√≥ √©rt√©k".replace(",", " ") if maradek > 0 else ""

            else:
                # dr√°g√°bb, de √©rt√©kalap√∫ aj√°nlat
                plusz_fizet = flexi_ar_int - lista_ar_int
                osszes_tobblet = maradek - plusz_fizet
                plusz_fizet_szoveg = f"{plusz_fizet:,} Ft".replace(",", " ")
                maradek_szoveg = f"{maradek:,} Ft".replace(",", " ")
                osszes_tobblet_szoveg = f"{osszes_tobblet:,}".replace(",", " ")

                # √∫j sz√∂vegez√©s
                ar_sor = (
                    f"+{plusz_fizet_szoveg} r√°ford√≠t√°ssal +{maradek_szoveg} √©rt√©ket kap, "
                    f"√≠gy {osszes_tobblet_szoveg} forintot sp√≥rol a k√∂vetkez≈ë kezel√©sein!"
                )
                ajandek_sor = ""

            # ‚ÄûK√°rtya‚Äù jelleg≈± blokk nat√≠v elrendez√©ssel
            left, mid, right = st.columns([1, 3, 1])
            with mid:
                st.divider()
                st.markdown(f"### üíú {kombi} b√©rlettel")
                st.markdown(f"#### {ar_sor}")
                if ajandek_sor:
                    st.markdown(f"##### {ajandek_sor}")
                st.divider()

