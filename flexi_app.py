"""
Flexi b√©rlet aj√°nl√≥ app (Streamlit)
-----------------------------------
Seg√≠t az asszisztenseknek gyorsan kisz√°molni,
hogy melyik flexi b√©rlet a legjobb aj√°nlat adott √°rhoz √©s alkalomsz√°mhoz.
"""

import itertools
import pandas as pd
import streamlit as st

# ========== Flexi b√©rletek √©s √°rlista ==========
BERLETEK = [
    {"nev": "Flexi50",  "ar": 45000,  "ertek": 50000},
    {"nev": "Flexi100", "ar": 85000,  "ertek": 100000},
    {"nev": "Flexi200", "ar": 160000, "ertek": 200000},
    {"nev": "Flexi300", "ar": 225000, "ertek": 300000},
    {"nev": "Flexi500", "ar": 350000, "ertek": 500000},
]

# √°rlista m√©retkateg√≥ri√°kkal
ARLISTA = {
    "N≈ë": {
        "XS ‚Äì 19 900 Ft / alkalom": {
            "√Ållcs√∫cs": 19900,
            "Bajusz": 19900,
            "Popsi r√©szben": 19900,
            "Mellbimb√≥ k√∂r√ºl": 19900,
            "Szem√∂ld√∂k k√∂z√∂tt": 19900
        },
        "S ‚Äì 24 900 Ft / alkalom": {
            "√Åll": 24900,
            "Orca": 24900,
            "Pajesz": 24900,
            "Mellek k√∂z√∂tt": 24900,
            "Hascs√≠k (4 cm)": 24900,
            "K√©zfej + ujjak": 24900,
            "L√°bfej + l√°bujjak": 24900,
            "Homlok": 24900,
            "Nyak": 24900
        },
        "M ‚Äì 27 900 Ft / alkalom": {
            "H√≥nalj": 27900,
            "Bikinivonal": 27900,
            "Hascs√≠k (10 cm)": 27900
        },
        "L ‚Äì 39 900 Ft / alkalom": {
            "Teljes bikini (intim)": 39900,
            "Popsi": 39900,
            "V√°ll": 39900,
            "Alkar": 39900,
            "Felkar": 39900,
            "Mellkas": 39900,
            "Has": 39900
        },
        "XL ‚Äì 47 900 Ft / alkalom": {
            "L√°bsz√°r": 47900,
            "Comb": 47900,
            "H√°t": 47900,
            "Teljes arc": 47900
        }
    },
    "F√©rfi": {
        "XS ‚Äì 23 880 Ft / alkalom": {
            "√Ållcs√∫cs": 23880,
            "Bajusz": 23880,
            "Mellbimb√≥ k√∂r√ºl": 23880,
            "Szem√∂ld√∂k k√∂z√∂tt": 23880
        },
        "S ‚Äì 29 880 Ft / alkalom": {
            "√Åll": 29880,
            "Orca": 29880,
            "Pajesz": 29880,
            "Mellek k√∂z√∂tt": 29880,
            "Hascs√≠k (4 cm)": 29880,
            "K√©zfej + ujjak": 29880,
            "L√°bfej + l√°bujjak": 29880,
            "Homlok": 29880,
            "Nyak": 29880
        },
        "M ‚Äì 33 480 Ft / alkalom": {
            "H√≥nalj": 33480,
            "Hascs√≠k (10 cm)": 33480
        },
        "L ‚Äì 47 880 Ft / alkalom": {
            "Far": 47880,
            "V√°ll": 47880,
            "Alkar": 47880,
            "Felkar": 47880,
            "Mellkas": 47880,
            "Has": 47880
        },
        "XL ‚Äì 57 480 Ft / alkalom": {
            "L√°bsz√°r": 57480,
            "Comb": 57480,
            "H√°t": 57480,
            "Teljes arc": 57480
        }
    }
}

# ========== Sz√°m√≠t√°si logika ==========
def legjobb_flexi_ajanlat(lista_ar_alkalom: float, alkalmak: int):
    teljes_listaar = lista_ar_alkalom * alkalmak
    eredmenyek = []

    for r in range(1, 4):  # 1‚Äì3 b√©rlet kombin√°ci√≥
        for kombinacio in itertools.combinations_with_replacement(BERLETEK, r):
            ossz_ar = sum(b["ar"] for b in kombinacio)
            ossz_ertek = sum(b["ertek"] for b in kombinacio)
            if ossz_ertek >= teljes_listaar:
                megtakaritas = teljes_listaar - ossz_ar
                megtakaritas_szazalek = 1 - (ossz_ar / teljes_listaar)
                maradek = ossz_ertek - teljes_listaar

                # rendez√©s a kombin√°ci√≥n bel√ºl b√©rlet √©rt√©ke szerint, cs√∂kken≈ë sorrendben
                rendezett = sorted(kombinacio, key=lambda b: b["ertek"], reverse=True)

                eredmenyek.append({
                    "Kombin√°ci√≥": " + ".join(b["nev"] for b in rendezett),
                    "Flexi √°ra": ossz_ar,
                    "Flexi √©rt√©ke": ossz_ertek,
                    "Lista√°ron fizetne": teljes_listaar,
                    "Megtakar√≠t√°s (Ft)": megtakaritas,
                    "Megtakar√≠t√°s (%)": round(megtakaritas_szazalek * 100, 2),
                    "Marad√©k √©rt√©k (Ft)": maradek
                })

    if not eredmenyek:
        return None, None

    df = pd.DataFrame(eredmenyek)
    legjobb = df.sort_values("Flexi √°ra").iloc[0]
    return legjobb, df.sort_values("Flexi √°ra")

# ========== Streamlit UI ==========

st.set_page_config(page_title="Flexi b√©rlet aj√°nl√≥", layout="centered", page_icon="üëõ")

st.markdown("""
<style>
/* CHECKBOX SPACING */
div.row-widget.stCheckbox {
    margin-top: -15px !important;
    margin-bottom: -15px !important;
}

/* NUMBER INPUT SPACING (amikor megjelenik dinamikusan) */
div[data-testid="stNumberInput"] {
    padding-top: 0px !important;
    padding-bottom: 0px !important;
    margin-top: -15px !important;
    margin-bottom: -15px !important;
}

/* NUMBER INPUT KONTAINER SZOROS√çT√ÅSA */
div[data-testid="stNumberInputContainer"] {
    margin-top: -15px !important;
    margin-bottom: -15px !important;
}
.checkbox-row {
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 1px solid #eee;
    padding: 0px 0;
}

/* NUMBER INPUT KONTAINER SZOROS√çT√ÅSA */
div[data-testid="stNumberInputContainer"] {
    margin-top: -4px !important;
    margin-bottom: -8px !important;
}

/* A mez≈ë kisebb legyen vizu√°lisan */
div[data-testid="stNumberInput"] input {
    height: 1.8em !important;
    padding: 2px 4px !important;
    font-size: 0.9rem !important;
    margin-top: -4px !important;
    margin-bottom: -8px !important;
}
</style>
""", unsafe_allow_html=True)

# nem kiv√°laszt√°sa
nem = st.radio("P√°ciens neme:", ["N≈ë", "F√©rfi"])

st.markdown("&nbsp;", unsafe_allow_html=True)

kivalasztott = []
for meret, teruletek in ARLISTA[nem].items():
    st.markdown(f"##### {meret}")

    for testr√©sz, ar in teruletek.items():
        # egy sorba tessz√ºk, vizu√°lis kapcsolattal
        st.markdown("<div class='checkbox-row'>", unsafe_allow_html=True)
        col1, col2 = st.columns([3, 1])
        with col1:
            jelol = st.checkbox(f"{testr√©sz}", key=f"{nem}_{testr√©sz}")
        with col2:
            if jelol:
                alkalom = st.number_input(
                    "Alkalmak",
                    min_value=1, max_value=10, step=1, value=1,
                    key=f"{nem}_{testr√©sz}_alkalom",
                    label_visibility="hidden"
                )
                kivalasztott.append({"testr√©sz": testr√©sz, "alkalom": alkalom, "ar": ar})
        st.markdown("</div>", unsafe_allow_html=True)

    st.markdown("&nbsp;", unsafe_allow_html=True)

# Eredm√©ny
osszes_ar = sum(k["ar"] * k["alkalom"] for k in kivalasztott)

if kivalasztott:
    st.markdown("#### üßæ √ñsszes√≠t≈ë")
    df_kosar = pd.DataFrame(
        [
            {
                "Ter√ºlet": k["testr√©sz"],
                "Alkalmak sz√°ma": k["alkalom"],
                "√År / alkalom (Ft)": f"{k['ar']:,}".replace(",", " "),
                "R√©sz√∂sszeg (Ft)": f"{k['ar'] * k['alkalom']:,}".replace(",", " "),
            }
            for k in kivalasztott
        ]
    )

    df_kosar.index = [""] * len(df_kosar)
    st.table(df_kosar, border="horizontal")

    st.info(f"**Teljes csomag lista√°ron:** {osszes_ar:,} Ft".replace(",", " "))

    st.divider()

    legjobb, minden = legjobb_flexi_ajanlat(osszes_ar, 1)

    kombinacio_szoveg = legjobb["Kombin√°ci√≥"].replace("Flexi", "").replace(" + ", "+").strip()
    kombi = f"Flexi{kombinacio_szoveg}"
    flexi_ar_int = int(legjobb["Flexi √°ra"])
    lista_ar_int = int(legjobb["Lista√°ron fizetne"])
    maradek = int(legjobb["Marad√©k √©rt√©k (Ft)"])

    flexi_ar = f"{flexi_ar_int:,} Ft".replace(",", " ")
    lista_ar = f"{lista_ar_int:,} Ft".replace(",", " ")

    # √Årlogika
    if flexi_ar_int < lista_ar_int:
        ar_sor = f"~~{lista_ar}~~ ‚Üí **{flexi_ar}**"
        ajandek_sor = f"+ {maradek:,} Ft lev√°s√°rolhat√≥ √©rt√©k".replace(",", " ") if maradek > 0 else ""
    elif flexi_ar_int == lista_ar_int:
        ar_sor = f"**{flexi_ar}**"
        ajandek_sor = f"+ {maradek:,} Ft lev√°s√°rolhat√≥ √©rt√©k".replace(",", " ") if maradek > 0 else ""
    else:
        plusz_fizet = flexi_ar_int - lista_ar_int
        osszes_tobblet = maradek - plusz_fizet
        plusz_fizet_szoveg = f"{plusz_fizet:,} Ft".replace(",", " ")
        maradek_szoveg = f"{maradek:,} Ft".replace(",", " ")
        osszes_tobblet_szoveg = f"{osszes_tobblet:,}".replace(",", " ")
        ar_sor = (
            f"+{plusz_fizet_szoveg} r√°ford√≠t√°ssal +{maradek_szoveg} √©rt√©ket kap, "
            f"√≠gy {osszes_tobblet_szoveg} forintot sp√≥rol a k√∂vetkez≈ë kezel√©sein!"
        )
        ajandek_sor = ""

    # ha a Flexi b√©rlet dr√°g√°bb, mint a lista√°r ‚Üí √≠rja ki az √°rat is a c√≠mbe
    if flexi_ar_int > lista_ar_int:
        st.markdown(f"### üíú {kombi} b√©rlet {flexi_ar}-√©rt")
    else:
        st.markdown(f"### üíú {kombi} b√©rlettel")
    st.markdown(f"#### {ar_sor}")
    if ajandek_sor:
        st.markdown(f"##### {ajandek_sor}")

    # <<< K√ñZELI B√âRLET AJ√ÅNL√ÅS >>>
    # Csak akkor aj√°nljon, ha a legjobb b√©rlet √°ra alacsonyabb, mint a lista√°r
    if int(legjobb["Flexi √°ra"]) < int(legjobb["Lista√°ron fizetne"]):
        KOZELI_KUSZOB = 45000  # Ft ‚Äì param√©terezhet≈ë k√ºsz√∂b
        aktualis_ar = int(legjobb["Flexi √°ra"])
        aktualis_ertek = int(legjobb["Flexi √©rt√©ke"])

        # az √∂sszes b√©rletet √°r szerint rendezz√ºk
        sorted_berletek = sorted(BERLETEK, key=lambda b: b["ar"])

        # megkeress√ºk, van-e a mostanihoz k√∂zel √°rban nagyobb flexi
        for b in sorted_berletek:
            if b["ar"] > aktualis_ar and (b["ar"] - aktualis_ar) <= KOZELI_KUSZOB:
                ar_kulonbseg = b["ar"] - aktualis_ar
                extra_ertek = b["ertek"] - aktualis_ertek
                ar_kulonbseg_szoveg = f"{ar_kulonbseg:,}".replace(",", " ")
                extra_ertek_szoveg = f"{extra_ertek:,}".replace(",", " ")

                st.markdown(
                    f"""
                    <div style='background-color:#f7f3fc; border-radius:10px; padding:12px; margin-top:10px; margin-bottom:20px;'>
                    üí° <b>Tipp:</b> ha <b>+{ar_kulonbseg_szoveg} Ft</b>-ot fizet,
                    <b>+{extra_ertek_szoveg} Ft</b> √©rt√©kkel t√∂bb kezel√©st kaphat a
                    <b>{b['nev']}</b> b√©rlettel.
                    </div>
                    """,
                    unsafe_allow_html=True
                )
                break

    st.divider()

    st.metric("Lista√°ron fizetne", f"{int(legjobb['Lista√°ron fizetne']):,} Ft".replace(",", " "))
    #st.metric("üí° Flexi aj√°nlat", f"Flexi{kombinacio_szoveg}")

    flexi_ar = int(legjobb["Flexi √°ra"])
    megtakaritas = (int(legjobb["Megtakar√≠t√°s (Ft)"])) * -1
    st.metric(
        label="üí∞ Aj√°nlat √°ra",
        value=f"{flexi_ar:,} Ft".replace(",", " "),
        delta=f"{megtakaritas:,} Ft".replace(",", " "),
        delta_color="normal"
    )

    flexi_ertek = int(legjobb["Flexi √©rt√©ke"])
    maradek = int(legjobb["Marad√©k √©rt√©k (Ft)"])
    st.metric(
        label="üíº Aj√°nlat teljes √©rt√©ke",
        value=f"{flexi_ertek:,} Ft".replace(",", " "),
        delta=f"{maradek:,} Ft marad a b√©rlet√©n".replace(",", " "),
        delta_color="normal"
    )

else:
    st.warning("V√°lassz legal√°bb egy kezel√©st a sz√°m√≠t√°shoz!")

st.divider()

# b√©rletek t√°bl√°zata
df_berletek = pd.DataFrame(BERLETEK)

# oszlopok √°tnevez√©se √©s form√°z√°sa
df_berletek = df_berletek.rename(columns={
    "nev": "B√©rlet t√≠pusa",
    "ar": "B√©rlet √°ra (Ft)",
    "ertek": "Felhaszn√°lhat√≥ √©rt√©k (Ft)"
})
df_berletek["Megtakar√≠t√°s (Ft)"] = df_berletek["Felhaszn√°lhat√≥ √©rt√©k (Ft)"] - df_berletek["B√©rlet √°ra (Ft)"]

# magyar form√°tum (ezres elv√°laszt√≥ sz√≥k√∂zzel)
df_berletek["B√©rlet √°ra (Ft)"] = df_berletek["B√©rlet √°ra (Ft)"].map(lambda x: f"{x:,}".replace(",", " "))
df_berletek["Felhaszn√°lhat√≥ √©rt√©k (Ft)"] = df_berletek["Felhaszn√°lhat√≥ √©rt√©k (Ft)"].map(lambda x: f"{x:,}".replace(",", " "))
df_berletek["Megtakar√≠t√°s (Ft)"] = df_berletek["Megtakar√≠t√°s (Ft)"].map(lambda x: f"{x:,}".replace(",", " "))

# √ºres index
df_berletek.index = [""] * len(df_berletek)

# t√°bl√°zat megjelen√≠t√©se
st.table(df_berletek, border="horizontal")