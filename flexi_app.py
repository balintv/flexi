"""
Flexi b√©rlet aj√°nl√≥ app (Streamlit)
-----------------------------------
Seg√≠t az asszisztenseknek gyorsan kisz√°molni,
hogy melyik flexi b√©rlet a legjobb aj√°nlat adott √°rhoz √©s alkalomsz√°mhoz.
"""

import itertools
import pandas as pd
import streamlit as st

# ========== Flexi b√©rletek ==========
BERLETEK = [
    {"nev": "Flexi50",  "ar": 45000,  "ertek": 50000},
    {"nev": "Flexi100", "ar": 85000,  "ertek": 100000},
    {"nev": "Flexi200", "ar": 160000, "ertek": 200000},
    {"nev": "Flexi300", "ar": 225000, "ertek": 300000},
    {"nev": "Flexi500", "ar": 350000, "ertek": 500000},
]

# ========== Sz√°m√≠t√°si logika ==========
def legjobb_flexi_ajanlat(lista_ar_alkalom: float, alkalmak: int):
    teljes_listaar = lista_ar_alkalom * alkalmak
    eredmenyek = []

    for r in range(1, 4):  # 1‚Äì3 b√©rlet kombin√°ci√≥
        for kombinacio in itertools.combinations_with_replacement(BERLETEK, r):
            ossz_ar = sum(b["ar"] for b in kombinacio)
            ossz_ertek = sum(b["ertek"] for b in kombinacio)
            if ossz_ertek >= teljes_listaar:
                megtakaritas = teljes_listaar - ossz_ar
                megtakaritas_szazalek = 1 - (ossz_ar / teljes_listaar)
                maradek = ossz_ertek - teljes_listaar

                # rendez√©s a kombin√°ci√≥n bel√ºl b√©rlet √©rt√©ke szerint, cs√∂kken≈ë sorrendben
                rendezett = sorted(kombinacio, key=lambda b: b["ertek"], reverse=True)

                eredmenyek.append({
                    "Kombin√°ci√≥": " + ".join(b["nev"] for b in rendezett),
                    "Flexi √°ra": ossz_ar,
                    "Flexi √©rt√©ke": ossz_ertek,
                    "Lista√°ron fizetne": teljes_listaar,
                    "Megtakar√≠t√°s (Ft)": megtakaritas,
                    "Megtakar√≠t√°s (%)": round(megtakaritas_szazalek * 100, 2),
                    "Marad√©k √©rt√©k (Ft)": maradek
                })

    if not eredmenyek:
        return None, None

    df = pd.DataFrame(eredmenyek)
    legjobb = df.sort_values("Flexi √°ra").iloc[0]
    return legjobb, df.sort_values("Flexi √°ra")

# ========== Streamlit UI ==========

st.set_page_config(page_title="Flexi b√©rlet tervez≈ë", layout="centered")

st.title("Flexi b√©rlet tervez≈ë")
st.markdown("""
Seg√≠t meghat√°rozni, hogy **melyik Flexi b√©rlet vagy b√©rletkombin√°ci√≥**
a legjobb aj√°nlat egy adott kezel√©shez.  
Add meg a kezel√©s **lista√°r√°t** √©s az **alkalmak sz√°m√°t**:
""")

# Kijelz√©si m√≥d v√°laszt√≥
display_mode = st.radio("N√©zet:", ["üéÅ Aj√°nl√≥", "üìä Metrikus"])

# ========== √öJ KEZEL√âSV√ÅLASZT√ì R√âSZ ==========

st.subheader("Kezel√©sek kiv√°laszt√°sa")

# nem kiv√°laszt√°sa
nem = st.radio("Nemet:", ["H√∂lgy", "F√©rfi"])

# √°rlista m√©retkateg√≥ri√°kkal
ARLISTA = {
    "H√∂lgy": {
        "XS": {"√Ållcs√∫cs": 19900, "Bajusz": 19900, "Popsi r√©szben": 19900, "Mellbimb√≥ k√∂r√ºl": 19900, "Szem√∂ld√∂k k√∂z√∂tt": 19900},
        "S": {"√Åll": 24900, "Orca": 24900, "Pajesz": 24900, "Nyak": 24900},
        "M": {"H√≥nalj": 27900, "Bikinivonal": 27900},
        "L": {"Teljes bikini": 39900, "Has": 39900},
        "XL": {"L√°bsz√°r": 47900, "Comb": 47900, "Teljes arc": 47900}
    },
    "F√©rfi": {
        "XS": {"√Ållcs√∫cs": 23880, "Bajusz": 23880, "Mellbimb√≥ k√∂r√ºl": 23880, "Szem√∂ld√∂k k√∂z√∂tt": 23880},
        "S": {"√Åll": 29880, "Orca": 29880, "Pajesz": 29880, "Nyak": 29880},
        "M": {"H√≥nalj": 33480},
        "L": {"Has": 47880, "Mellkas": 47880},
        "XL": {"L√°bsz√°r": 57480, "Comb": 57480, "Teljes arc": 57480}
    }
}

# kezel√©sek kiv√°laszt√°sa kateg√≥ri√°nk√©nt
st.markdown("#### Jel√∂lje be a kezelend≈ë ter√ºleteket √©s adja meg az alkalomsz√°mot:")

kivalasztott = []
for meret, teruletek in ARLISTA[nem].items():
    st.markdown(f"### {meret} ter√ºletek")
    for testr√©sz, ar in teruletek.items():
        col1, col2 = st.columns([3, 1])
        with col1:
            jelol = st.checkbox(f"{testr√©sz} ‚Äì {ar:,} Ft / alkalom".replace(",", " "), key=f"{nem}_{testr√©sz}")
        with col2:
            if jelol:
                alkalom = st.number_input(
                    "Alkalmak", min_value=1, max_value=10, step=1, value=1, key=f"{nem}_{testr√©sz}_alkalom"
                )
                kivalasztott.append({"testr√©sz": testr√©sz, "alkalom": alkalom, "ar": ar})

# √∂sszegz√©s
osszes_ar = sum(k["ar"] * k["alkalom"] for k in kivalasztott)

if kivalasztott:
    st.info(f"**Teljes lista√°r:** {osszes_ar:,} Ft".replace(",", " "))
else:
    st.warning("V√°lasszon legal√°bb egy kezel√©st a sz√°m√≠t√°shoz!")

# ========== SZ√ÅM√çT√ÅS GOMB ==========
if st.button("Sz√°mol√°s"):
    if len(kivalasztott) == 0:
        st.error("Nincs kiv√°lasztott kezel√©s.")
    else:
        legjobb, minden = legjobb_flexi_ajanlat(osszes_ar, 1)
        if legjobb is None:
            st.error("Nincs olyan b√©rlet, ami fedezn√© az √©rt√©ket.")
        else:
            # üí° r√∂videbb kombin√°ci√≥-megjelen√≠t√©s (Flexi100+50)
            kombinacio_szoveg = legjobb["Kombin√°ci√≥"].replace("Flexi", "").replace(" + ", "+").strip()

            if display_mode == "üìä Metrikus":
                st.metric("Lista√°ron fizetne", f"{int(legjobb['Lista√°ron fizetne']):,} Ft".replace(",", " "))
                st.metric("üí° Flexi aj√°nlat", f"Flexi{kombinacio_szoveg}")

                flexi_ar = int(legjobb["Flexi √°ra"])
                megtakaritas = (int(legjobb["Megtakar√≠t√°s (Ft)"])) * -1
                st.metric(
                    label="üí∞ Aj√°nlat √°ra",
                    value=f"{flexi_ar:,} Ft".replace(",", " "),
                    delta=f"{megtakaritas:,} Ft".replace(",", " "),
                    delta_color="normal"
                )

                flexi_ertek = int(legjobb["Flexi √©rt√©ke"])
                maradek = int(legjobb["Marad√©k √©rt√©k (Ft)"])
                st.metric(
                    label="üíº Aj√°nlat teljes √©rt√©ke",
                    value=f"{flexi_ertek:,} Ft".replace(",", " "),
                    delta=f"{maradek:,} Ft marad a b√©rlet√©n".replace(",", " "),
                    delta_color="normal"
                )

            else:
                # ----- AJ√ÅNL√ì (MARKETINGES) N√âZET -----
                kombi = f"Flexi{kombinacio_szoveg}"
                flexi_ar_int = int(legjobb["Flexi √°ra"])
                lista_ar_int = int(legjobb["Lista√°ron fizetne"])
                maradek = int(legjobb["Marad√©k √©rt√©k (Ft)"])

                flexi_ar = f"{flexi_ar_int:,} Ft".replace(",", " ")
                lista_ar = f"{lista_ar_int:,} Ft".replace(",", " ")

                # √Årlogika
                if flexi_ar_int < lista_ar_int:
                    ar_sor = f"~~{lista_ar}~~ ‚Üí **{flexi_ar}**"
                    ajandek_sor = f"+ {maradek:,} Ft lev√°s√°rolhat√≥ √©rt√©k".replace(",", " ") if maradek > 0 else ""
                elif flexi_ar_int == lista_ar_int:
                    ar_sor = f"**{flexi_ar}**"
                    ajandek_sor = f"+ {maradek:,} Ft lev√°s√°rolhat√≥ √©rt√©k".replace(",", " ") if maradek > 0 else ""
                else:
                    plusz_fizet = flexi_ar_int - lista_ar_int
                    osszes_tobblet = maradek - plusz_fizet
                    plusz_fizet_szoveg = f"{plusz_fizet:,} Ft".replace(",", " ")
                    maradek_szoveg = f"{maradek:,} Ft".replace(",", " ")
                    osszes_tobblet_szoveg = f"{osszes_tobblet:,}".replace(",", " ")
                    ar_sor = (
                        f"+{plusz_fizet_szoveg} r√°ford√≠t√°ssal +{maradek_szoveg} √©rt√©ket kap, "
                        f"√≠gy {osszes_tobblet_szoveg} forintot sp√≥rol a k√∂vetkez≈ë kezel√©sein!"
                    )
                    ajandek_sor = ""

                left, mid, right = st.columns([1, 3, 1])
                with mid:
                    st.divider()
                    st.markdown(f"### üíú {kombi} b√©rlettel")
                    st.markdown(f"#### {ar_sor}")
                    if ajandek_sor:
                        st.markdown(f"##### {ajandek_sor}")
                    st.divider()
